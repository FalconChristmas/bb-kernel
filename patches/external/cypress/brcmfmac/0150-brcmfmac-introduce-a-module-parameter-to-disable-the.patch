From 7c4418cb5f0a1764b942c5fdd38b6ec48b03fa13 Mon Sep 17 00:00:00 2001
From: Gokul Sivakumar <gokulkumar.sivakumar@infineon.com>
Date: Thu, 13 Oct 2022 04:41:42 -0500
Subject: [PATCH 150/208] brcmfmac: introduce a module parameter to disable the
 6GHz Operation

Add a kernel module parameter "disable_6ghz" to disable the operation of
the STA and SoftAP in the 6GHz band. By default, this module parameter will
be set to zero, so 6GHz operation will be disabled during kernel module
load only when explicity setting "disable_6ghz=1".

Signed-off-by: Gokul Sivakumar <gokulkumar.sivakumar@infineon.com>
---
 .../net/wireless/broadcom/brcm80211/brcmfmac/common.c    | 5 +++++
 .../net/wireless/broadcom/brcm80211/brcmfmac/common.h    | 2 ++
 .../net/wireless/broadcom/brcm80211/brcmfmac/feature.c   | 5 +++++
 .../net/wireless/broadcom/brcm80211/brcmfmac/feature.h   | 9 +++++++++
 4 files changed, 21 insertions(+)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.c
index 5b132e90d9af..98865efd05c2 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.c
@@ -92,6 +92,10 @@ static int brcmf_fw_ap_select;
 module_param_named(fw_ap_select, brcmf_fw_ap_select, int, 0400);
 MODULE_PARM_DESC(fw_ap_select, "Allow FW for AP selection");
 
+static int brcmf_disable_6ghz;
+module_param_named(disable_6ghz, brcmf_disable_6ghz, int, 0400);
+MODULE_PARM_DESC(disable_6ghz, "Disable 6GHz Operation");
+
 static struct brcmfmac_platform_data *brcmfmac_pdata;
 struct brcmf_mp_global_t brcmf_mp_global;
 
@@ -501,6 +505,7 @@ struct brcmf_mp_device *brcmf_get_module_param(struct device *dev,
 	settings->ignore_probe_fail = !!brcmf_ignore_probe_fail;
 #endif
 	settings->fw_ap_select = !!brcmf_fw_ap_select;
+	settings->disable_6ghz = !!brcmf_disable_6ghz;
 
 	if (bus_type == BRCMF_BUSTYPE_SDIO)
 		settings->bus.sdio.txglomsz = brcmf_sdiod_txglomsz;
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.h b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.h
index d9f740a3e4e7..81fed6b54655 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/common.h
@@ -41,6 +41,7 @@ extern struct brcmf_mp_global_t brcmf_mp_global;
  * @default_pm: default power management (PM) mode.
  * @ignore_probe_fail: Ignore probe failure.
  * @fw_ap_select: Allow FW to select AP.
+ * @disable_6ghz: Disable 6GHz operation
  * @country_codes: If available, pointer to struct for translating country codes
  * @bus: Bus specific platform data. Only SDIO at the mmoment.
  */
@@ -54,6 +55,7 @@ struct brcmf_mp_device {
 	int		default_pm;
 	bool		ignore_probe_fail;
 	bool		fw_ap_select;
+	bool		disable_6ghz;
 	struct brcmfmac_pd_cc *country_codes;
 	const char	*board_type;
 	union {
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.c
index 08535a5e61fe..f653f2cc2ae3 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.c
@@ -332,3 +332,8 @@ bool brcmf_feat_is_quirk_enabled(struct brcmf_if *ifp,
 {
 	return (ifp->drvr->chip_quirks & BIT(quirk));
 }
+
+bool brcmf_feat_is_6ghz_enabled(struct brcmf_if *ifp)
+{
+	return (!ifp->drvr->settings->disable_6ghz);
+}
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.h b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.h
index a81cabd975ce..c054946e4187 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/feature.h
@@ -128,4 +128,13 @@ bool brcmf_feat_is_enabled(struct brcmf_if *ifp, enum brcmf_feat_id id);
 bool brcmf_feat_is_quirk_enabled(struct brcmf_if *ifp,
 				 enum brcmf_feat_quirk quirk);
 
+/**
+ * brcmf_feat_is_6ghz_enabled() - Find if 6GHZ Operation is allowed
+ *
+ * @ifp: interface instance.
+ *
+ * Return: true if 6GHz operation is allowed; otherwise false.
+ */
+bool brcmf_feat_is_6ghz_enabled(struct brcmf_if *ifp);
+
 #endif /* _BRCMF_FEATURE_H */
-- 
2.17.1


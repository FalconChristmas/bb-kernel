From 9df7e5513b2a88420ebdd3740c912e7739d07247 Mon Sep 17 00:00:00 2001
From: Carter Chen <carter.chen@infineon.com>
Date: Thu, 13 Apr 2023 01:06:30 -0500
Subject: [PATCH 191/208] brcmfmac: add protection for PCIe Read/Write
 out-of-bound

Fixes: SWWLAN-146124

Signed-off-by: Carter Chen <carter.chen@infineon.com>
---
 .../broadcom/brcm80211/brcmfmac/pcie.c        | 119 ++++++++++++++++--
 1 file changed, 109 insertions(+), 10 deletions(-)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
index 279746443d2a..c06a1d2aadbf 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
@@ -359,9 +359,7 @@ struct brcmf_pciedev_info {
 	void (*write_ptr)(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 			  u16 value);
 	struct brcmf_mp_device *settings;
-#ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	ulong bar1_size;
-#endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 #ifdef DEBUG
 	u32 console_interval;
 	bool console_active;
@@ -471,6 +469,8 @@ brcmf_pcie_write_reg32(struct brcmf_pciedev_info *devinfo, u32 reg_offset,
 static u8
 brcmf_pcie_read_tcm8(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	unsigned long flags;
@@ -488,6 +488,13 @@ brcmf_pcie_read_tcm8(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 
 	return value;
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus,
+			  "mem_offset:%d exceeds device size=%ld\n",
+			  mem_offset, devinfo->bar1_size);
+		return -EINVAL;
+	}
+
 	return (ioread8(address));
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -496,6 +503,8 @@ brcmf_pcie_read_tcm8(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 static u16
 brcmf_pcie_read_tcm16(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	u16 value;
@@ -513,6 +522,12 @@ brcmf_pcie_read_tcm16(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 
 	return value;
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus, "mem_offset:%d exceeds device size=%ld\n",
+				mem_offset, devinfo->bar1_size);
+		return -EINVAL;
+	}
+
 	return (ioread16(address));
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -522,6 +537,8 @@ static void
 brcmf_pcie_write_tcm16(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 		       u16 value)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	unsigned long flags;
@@ -537,6 +554,12 @@ brcmf_pcie_write_tcm16(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 	pci_write_config_dword(devinfo->pdev, BCMA_PCI_BAR1_WIN, 0x0);
 	raw_spin_unlock_irqrestore(&pcie_lock, flags);
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus, "mem_offset:%d exceeds device size=%ld\n",
+				mem_offset, devinfo->bar1_size);
+		return;
+	}
+
 	iowrite16(value, address);
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -564,6 +587,8 @@ brcmf_pcie_write_idx(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 static u32
 brcmf_pcie_read_tcm32(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	u32 value;
@@ -581,6 +606,12 @@ brcmf_pcie_read_tcm32(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 
 	return value;
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus, "mem_offset:%d exceeds device size=%ld\n",
+			  mem_offset, devinfo->bar1_size);
+		return -EINVAL;
+	}
+
 	return (ioread32(address));
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -590,6 +621,8 @@ static void
 brcmf_pcie_write_tcm32(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 		       u32 value)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	unsigned long flags;
@@ -604,6 +637,12 @@ brcmf_pcie_write_tcm32(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 	pci_write_config_dword(devinfo->pdev, BCMA_PCI_BAR1_WIN, 0x0);
 	raw_spin_unlock_irqrestore(&pcie_lock, flags);
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus, "mem_offset:%d exceeds device size=%ld\n",
+			  mem_offset, devinfo->bar1_size);
+		return;
+	}
+
 	iowrite32(value, address);
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -612,6 +651,8 @@ brcmf_pcie_write_tcm32(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 static u32
 brcmf_pcie_read_ram32(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + devinfo->ci->rambase
 		+ mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
@@ -630,6 +671,12 @@ brcmf_pcie_read_ram32(struct brcmf_pciedev_info *devinfo, u32 mem_offset)
 
 	return value;
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus, "mem_offset:%d exceeds device size=%ld\n",
+			  mem_offset, devinfo->bar1_size);
+		return -EINVAL;
+	}
+
 	return (ioread32(address));
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -639,6 +686,8 @@ static void
 brcmf_pcie_write_ram32(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 		       u32 value)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + devinfo->ci->rambase
 		+ mem_offset;
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
@@ -654,6 +703,12 @@ brcmf_pcie_write_ram32(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 	pci_write_config_dword(devinfo->pdev, BCMA_PCI_BAR1_WIN, 0x0);
 	raw_spin_unlock_irqrestore(&pcie_lock, flags);
 #else
+	if ((address - devinfo->tcm) >= devinfo->bar1_size) {
+		brcmf_err(bus, "mem_offset:%d exceeds device size=%ld\n",
+			  mem_offset, devinfo->bar1_size);
+		return;
+	}
+
 	iowrite32(value, address);
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 }
@@ -663,6 +718,8 @@ static void
 brcmf_pcie_copy_mem_todev(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 			  void *srcaddr, u32 len)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 	__le32 *src32;
 	__le16 *src16;
@@ -685,8 +742,15 @@ brcmf_pcie_copy_mem_todev(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 						 devinfo->bar1_size);
 					address = address -
 						devinfo->bar1_size;
-				}
+				} else
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
+				if ((address - devinfo->tcm) >=
+				     devinfo->bar1_size) {
+					brcmf_err(bus,
+						  "mem_offset:%d exceeds device size=%ld\n",
+						  mem_offset, devinfo->bar1_size);
+					return;
+				}
 				iowrite8(*src8, address);
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 				raw_spin_unlock_irqrestore(&pcie_lock, flags);
@@ -709,8 +773,15 @@ brcmf_pcie_copy_mem_todev(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 						devinfo->bar1_size);
 					address = address -
 						devinfo->bar1_size;
-				}
+				} else
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
+				if ((address - devinfo->tcm) >=
+				     devinfo->bar1_size) {
+					brcmf_err(bus,
+						  "mem_offset:%d exceeds device size=%ld\n",
+						  mem_offset, devinfo->bar1_size);
+					return;
+				}
 				iowrite16(le16_to_cpu(*src16), address);
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 				raw_spin_unlock_irqrestore(&pcie_lock, flags);
@@ -733,8 +804,15 @@ brcmf_pcie_copy_mem_todev(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 					 BCMA_PCI_BAR1_WIN,
 					 devinfo->bar1_size);
 				address = address - devinfo->bar1_size;
-			}
+			} else
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
+			if ((address - devinfo->tcm) >=
+				devinfo->bar1_size) {
+				brcmf_err(bus,
+					  "mem_offset:%d exceeds device size=%ld\n",
+					  mem_offset, devinfo->bar1_size);
+				return;
+			}
 			iowrite32(le32_to_cpu(*src32), address);
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 			raw_spin_unlock_irqrestore(&pcie_lock, flags);
@@ -754,6 +832,8 @@ static void
 brcmf_pcie_copy_dev_tomem(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 			  void *dstaddr, u32 len)
 {
+	struct pci_dev *pdev = devinfo->pdev;
+	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 	void __iomem *address = devinfo->tcm + mem_offset;
 	__le32 *dst32;
 	__le16 *dst16;
@@ -776,8 +856,15 @@ brcmf_pcie_copy_dev_tomem(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 						devinfo->bar1_size);
 					address = address -
 						devinfo->bar1_size;
-				}
+				} else
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
+				if ((address - devinfo->tcm) >=
+					devinfo->bar1_size) {
+					brcmf_err(bus,
+						  "mem_offset:%d exceeds device size=%ld\n",
+						  mem_offset, devinfo->bar1_size);
+					return;
+				}
 				*dst8 = ioread8(address);
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 				raw_spin_unlock_irqrestore(&pcie_lock, flags);
@@ -800,8 +887,15 @@ brcmf_pcie_copy_dev_tomem(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 						devinfo->bar1_size);
 					address = address -
 						devinfo->bar1_size;
-				}
+				} else
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
+				if ((address - devinfo->tcm) >=
+					devinfo->bar1_size) {
+					brcmf_err(bus,
+						  "mem_offset:%d exceeds device size=%ld\n",
+						  mem_offset, devinfo->bar1_size);
+					return;
+				}
 				*dst16 = cpu_to_le16(ioread16(address));
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 				raw_spin_unlock_irqrestore(&pcie_lock, flags);
@@ -824,8 +918,15 @@ brcmf_pcie_copy_dev_tomem(struct brcmf_pciedev_info *devinfo, u32 mem_offset,
 					BCMA_PCI_BAR1_WIN,
 					devinfo->bar1_size);
 				address = address - devinfo->bar1_size;
-			}
+			} else
 #endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
+			if ((address - devinfo->tcm) >=
+				devinfo->bar1_size) {
+				brcmf_err(bus,
+					  "mem_offset:%d exceeds device size=%ld\n",
+					  mem_offset, devinfo->bar1_size);
+				return;
+			}
 			*dst32 = cpu_to_le32(ioread32(address));
 #ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 			raw_spin_unlock_irqrestore(&pcie_lock, flags);
@@ -2186,9 +2287,7 @@ static int brcmf_pcie_get_resource(struct brcmf_pciedev_info *devinfo)
 
 	devinfo->regs = ioremap(bar0_addr, BRCMF_PCIE_REG_MAP_SIZE);
 	devinfo->tcm = ioremap(bar1_addr, bar1_size);
-#ifdef CONFIG_BRCMFMAC_PCIE_BARWIN_SZ
 	devinfo->bar1_size = bar1_size;
-#endif /* CONFIG_BRCMFMAC_PCIE_BARWIN_SZ */
 
 	if (!devinfo->regs || !devinfo->tcm) {
 		brcmf_err(bus, "ioremap() failed (%p,%p)\n", devinfo->regs,
-- 
2.17.1

